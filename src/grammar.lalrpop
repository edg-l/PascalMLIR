use crate::{
    ast,
    tokens::Token,
    lexer::LexicalError,
};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "program" => Token::WordProgram,
        "identifier" => Token::Identifier(<&'input str>),
        "integer" => Token::Integer(<&'input str>),
        "real" => Token::Real(<&'input str>),
        "string" => Token::String(<&'input str>),
        "-" => Token::SpecialMinus,
        "+" => Token::SpecialPlus,
        "=" => Token::SpecialEqual,
        "(" => Token::SpecialOpenParen,
        ")" => Token::SpecialCloseParen,
        "[" => Token::SpecialOpenBracket,
        "]" => Token::SpecialCloseBracket,
        "," => Token::SpecialComma,
        ":" => Token::SpecialColon,
        ";" => Token::SpecialSemiColon,
        ".." => Token::SpecialRange,
        "array" => Token::WordArray,
        "of" => Token::WordOf,
        "packed" => Token::WordPacked,
        "record" => Token::WordRecord,
        "end" => Token::WordEnd,
        "case" => Token::WordCase,
        "type_integer" => Token::TypeInteger,
        "type_real" => Token::TypeReal,
        "type_boolean" => Token::TypeBoolean,
        "type_char" => Token::TypeChar,
    }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

CommaNoTrailing<T>: Vec<T> = {
    <mut v:(<T>)*> <e:("," <T>)?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

SemiColonNoTrailing<T>: Vec<T> = {
    <mut v:(<T>)*> <e:(";" <T>)?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Number: ast::Number<'input> = {
    <"integer"> => ast::Number::Integer(<>),
    <"real"> => ast::Number::Real(<>),
}

pub Constant: ast::Constant<'input> = {
    <Number> => ast::Constant::Number(<>),
    <"string"> => ast::Constant::String(<>),
    "+"? <ident:"identifier"> => ast::Constant::Identifier { is_negative: false, ident },
    "-" <ident:"identifier"> => ast::Constant::Identifier { is_negative: true, ident },
}

pub ConstantDef: ast::ConstantDef<'input> = {
    <ident:"identifier"> "=" <value:Constant> => ast::ConstantDef {
        ident,
        value
    }
}

pub SimpleType: ast::SimpleType = {
    "type_integer" => ast::SimpleType::Integer,
    "type_real" => ast::SimpleType::Real,
    "type_boolean" => ast::SimpleType::Boolean,
    "type_char" => ast::SimpleType::Char,
}

pub EnumeratedType: Vec<&'input str> = {
    "(" <CommaNoTrailing<"identifier">> ")" => <>
}

pub SubRangeType: ast::Type<'input> = {
    <start:Constant> ".." <end:Constant> => ast::Type::SubRange {
        start,
        end
    }
}

OrdinalType: ast::Type<'input> = {
    <SimpleType> => ast::Type::Simple(<>),
    <SubRangeType> => <>,
}

RecordSection: ast::RecordSection<'input> = {
    <identifier_list:CommaNoTrailing<"identifier">> ":" <type_denoter:Type> => ast::RecordSection {
        identifier_list,
        type_denoter: Box::new(type_denoter)
    }
}

RecordFixedPart: ast::RecordFixedPart<'input> = {
    <records:SemiColonNoTrailing<RecordSection>> => ast::RecordFixedPart {
        records
    }
}

VariantSelector: ast::VariantSelector<'input> = {
    <tag_field:"identifier"> ":" <tag_type:OrdinalType> => ast::VariantSelector {
        tag_field: Some(tag_field),
        tag_type: Box::new(tag_type)
    },
    <tag_type:OrdinalType> => ast::VariantSelector {
        tag_field: None,
        tag_type: Box::new(tag_type)
    },
}

CaseVariant: ast::CaseVariant<'input> = {
    <case_constants:CommaNoTrailing<Constant>> ":" "(" <field_list:RecordFieldList?> ")" => ast::CaseVariant {
        case_constants,
        field_list
    },
}

RecordVariantPart: ast::RecordVariantPart<'input> = {
    "case" <variant_selector:VariantSelector> "of" <variants:SemiColonNoTrailing<CaseVariant>> => ast::RecordVariantPart {
        variant_selector,
        variants
    },
}

RecordFieldList: ast::RecordFieldList<'input> = {
    <fixed_part:RecordFixedPart> ";"? => ast::RecordFieldList {
        fixed_part: Some(fixed_part),
        variant_part: None
    },
    <fixed_part:RecordFixedPart> ";" <variant_part:RecordVariantPart> ";"? => ast::RecordFieldList {
        fixed_part: Some(fixed_part),
        variant_part: Some(variant_part)
    },
    <variant_part:RecordVariantPart> ";"? => ast::RecordFieldList {
        fixed_part: None,
        variant_part: Some(variant_part)
    },
}

pub Type: ast::Type<'input> = {
    <p:"packed"?> "record" <field_list:RecordFieldList?> "end" => ast::Type::Record {
        field_list: None,
        packed: p.is_some(),
    },
    <p:"packed"?> "array" "[" <index:CommaNoTrailing<OrdinalType>> "]" "of" <c:Type> => ast::Type::Array {
        index,
        component: Box::new(c),
        packed: p.is_some(),
    },
    <SimpleType> => ast::Type::Simple(<>),
    <EnumeratedType> => ast::Type::Enumerated(<>),
    <SubRangeType> => <>,
    <"identifier"> => ast::Type::Identifier(<>),
}

pub TypeDef: ast::TypeDef<'input> = {
    <ident:"identifier"> "=" <value:Type> => ast::TypeDef {
        ident,
        value,
    }
}
