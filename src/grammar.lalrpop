use crate::{
    ast,
    tokens::Token,
    lexer::LexicalError,
};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "program" => Token::WordProgram,
        "identifier" => Token::Identifier(<&'input str>),
        "integer" => Token::Integer(<&'input str>),
        "real" => Token::Real(<&'input str>),
        "string" => Token::String(<&'input str>),
        "-" => Token::SpecialMinus,
        "+" => Token::SpecialPlus,
        "=" => Token::SpecialEqual,
    }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Number: ast::Number<'input> = {
    <"integer"> => ast::Number::Integer(<>),
    <"real"> => ast::Number::Real(<>),
}

pub Constant: ast::Constant<'input> = {
    <Number> => ast::Constant::Number(<>),
    <"string"> => ast::Constant::String(<>),
    "+"? <ident:"identifier"> => ast::Constant::Identifier { is_negative: false, ident },
    "-" <ident:"identifier"> => ast::Constant::Identifier { is_negative: true, ident },
}

pub ConstantDef: ast::ConstantDef<'input> = {
    <ident:"identifier"> "=" <value:Constant> => ast::ConstantDef {
        ident,
        value
    }
}
